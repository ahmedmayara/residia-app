generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  favoriteListings String[]

  accounts Account[]
  listings Listing[]
  bookings Booking[]
  reviews  Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  hostId        String   @db.ObjectId
  title         String
  description   String
  images        String[]
  type          String
  price         Int
  roomCount     Int
  bathroomCount Int
  maxGuests     Int
  address       String
  country       String
  city          String

  bookings Booking[]
  reviews  Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  host User @relation(fields: [hostId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId  String   @db.ObjectId
  tenantId   String   @db.ObjectId
  totalPrice Int
  checkIn    DateTime
  checkOut   DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tenant  User    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId String   @db.ObjectId
  tenantId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  tenant  User    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}
